import os
import subprocess
import sys
import random
import time
import requests
import threading
from stem import Signal
from stem.control import Controller

# Check and install required packages
def install_dependencies():
    required_packages = ['requests', 'stem']

    # Check if the required packages are installed
    for package in required_packages:
        try:
            subprocess.check_call([sys.executable, '-m', 'pip', 'show', package])
        except subprocess.CalledProcessError:
            print(f"{package} not found. Installing...")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])

# Install Tor (if not installed)
def install_tor():
    if os.name == 'posix':  # Linux/macOS
        try:
            print("Installing Tor...")
            subprocess.check_call(["sudo", "apt-get", "install", "-y", "tor"])
            print("Tor installed successfully.")
        except subprocess.CalledProcessError:
            print("Failed to install Tor.")
    elif os.name == 'nt':  # Windows
        print("Please install Tor manually from: https://www.torproject.org/")

# Proxies (replace with actual working proxies)
proxies = [
    "http://193.24.233.4:8080",
    "http://168.121.16.5:3128",
    "http://191.101.55.7:1080",  # Replace with your actual proxies
    # Add more proxies if necessary
]

# Tor setup
tor_socks_port = 9050
tor_control_port = 9051
tor_password = "your_password"

# Function to rotate proxies (optimized)
def rotate_proxy():
    proxy = random.choice(proxies)
    return {'http': proxy, 'https': proxy}

# Function to change Tor identity
def change_tor_identity():
    try:
        with Controller.from_port(port=tor_control_port) as controller:
            controller.authenticate(password=tor_password)
            controller.signal(Signal.NEWNYM)  # Request a new identity
            print("Tor identity changed!")
    except Exception as e:
        print(f"Tor identity change failed: {e}")

# Function to make requests through proxy (or Tor) with retries
def make_request(url, retries=3):
    for attempt in range(retries):
        try:
            proxy = rotate_proxy()
            response = requests.get(url, proxies=proxy, timeout=10)
            if response.status_code == 200:
                print(f"Request Successful: {url}")
                return response
            else:
                print(f"Failed to fetch {url}, Status: {response.status_code}")
        except requests.RequestException as e:
            print(f"Request error (attempt {attempt + 1}/{retries}): {e}")
            if attempt == retries - 1:
                print(f"Failed after {retries} attempts.")
                return None
            time.sleep(random.randint(1, 3))  # Backoff before retrying

# Threading function for handling multiple requests with proxy rotation
def thread_request(url, num_requests):
    for _ in range(num_requests):
        make_request(url)
        time.sleep(random.randint(1, 5))  # Add randomness to requests

# Auto-update proxies (simulated for example)
def update_proxies():
    print("Updating proxy list...")
    # Simulate fetching new proxies (in real usage, update dynamically)
    new_proxies = [
        "http://192.168.1.100:8080",  # Example proxy
        "http://198.51.100.2:8080",   # Example proxy
    ]
    proxies.extend(new_proxies)
    print(f"New proxies added: {new_proxies}")

# Start Anonsurf (Tor anonymization service)
def start_anonsurf():
    try:
        print("Starting Anonsurf...")
        subprocess.check_call(["sudo", "./kali-anonsurf/anonsurf", "start"])
        print("Anonsurf started successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to start Anonsurf: {e}")

# Stop Anonsurf (if needed)
def stop_anonsurf():
    try:
        print("Stopping Anonsurf...")
        subprocess.check_call(["sudo", "./kali-anonsurf/anonsurf", "stop"])
        print("Anonsurf stopped successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to stop Anonsurf: {e}")

# Main execution for proxy switching, Tor setup, and Anonsurf
def main():
    # Install dependencies and necessary tools
    install_dependencies()
    install_tor()

    target_url = "http://example.com"  # Replace with target URL
    num_requests = 5  # Number of requests to make
    threads = []
    
    # Start Anonsurf to route traffic through Tor
    start_anonsurf()

    # Start Tor Identity Change in background
    tor_thread = threading.Thread(target=change_tor_identity)
    tor_thread.start()

    # Create multiple threads for making requests
    for _ in range(10):  # Number of threads
        t = threading.Thread(target=thread_request, args=(target_url, num_requests))
        threads.append(t)
        t.start()

    # Join threads
    for t in threads:
        t.join()
    
    # Change Tor identity periodically
    while True:
        time.sleep(120)  # Change identity every 2 minutes
        change_tor_identity()

        # Optionally update proxies at intervals
        if random.random() < 0.1:  # Random chance to update proxies
            update_proxies()

if __name__ == "__main__":
    main()
